def get_ec2_enis(ec2_client):
    enis = []

    # Retrieve all EC2 network interfaces
    response = ec2_client.describe_network_interfaces()

    # Iterate over the network interfaces and retrieve their associated information
    for interface in response['NetworkInterfaces']:
        eni = {
            'ENI ID': interface['NetworkInterfaceId'],
            'Private IP': interface['PrivateIpAddress'],
            'Name': '',
            'Description': '',
            'Tags': {}
        }

        # Retrieve ENI tags if available
        if 'TagSet' in interface:
            for tag in interface['TagSet']:
                if tag['Key'] == 'Name':
                    eni['Name'] = tag['Value']
                elif tag['Key'] == 'Description':
                    eni['Description'] = tag['Value']
                else:
                    eni['Tags'][tag['Key']] = tag['Value']

        enis.append(eni)

    return eni

def get_ec2_enis(ec2_resource):
    enis = []

    # Retrieve EC2 instances
    instances = ec2_resource.instances.all()

    # Iterate over instances and their network interfaces
    for instance in instances:
        for interface in instance.network_interfaces:
            eni = {
                'ENIId': interface.id,
                'PrivateIP': interface.private_ip_address,
                'Description': interface.description,
                'Tags': interface.tags
            }
            enis.append(eni)

    return enis







def get_lambda_enis(lambda_client):
    enis = []

    try:
        response = lambda_client.list_functions()
        functions = response['Functions']
        for function in functions:
            function_name = function['FunctionName']
            eni_metadata = get_lambda_eni_metadata(lambda_client, function_name)
            enis.append({
                'FunctionName': function_name,
                'ENIs': eni_metadata
            })
    except Exception as e:
        print(f"Error retrieving Lambda ENIs: {e}")

    return enis

def get_lambda_eni_metadata(lambda_client, lambda_function_name):
    metadata = []

    try:
        response = lambda_client.get_function_configuration(FunctionName=lambda_function_name)
        eni_configurations = response['VpcConfig']['SubnetIds']
        for eni_configuration in eni_configurations:
            eni_id = eni_configuration['NetworkInterfaceId']
            eni_metadata = get_eni_metadata(ec2_client, eni_id)
            metadata.append(eni_metadata)
    except Exception as e:
        print(f"Error retrieving metadata for Lambda function {lambda_function_name}: {e}")

    return metadata
    
    def main():
    # Create the EC2 and Lambda clients
    ec2_client = boto3.client('ec2')
    lambda_client = boto3.client('lambda')

    # Get EC2 ENIs and their metadata
    ec2_enis = get_ec2_enis(ec2_client)

    # Get Lambda ENIs and their metadata
    lambda_enis = get_lambda_enis(lambda_client)

    # Display the EC2 ENIs and their metadata
    print("EC2 ENIs:")
    for eni in ec2_enis:
        print(f"ENI ID: {eni['ENIId']}")
        print(f"Private IP: {eni['PrivateIP']}")
        print(f"Description: {eni['Description']}")
        print(f"Tags: {eni['Tags']}")
        print("")

    # Display the Lambda functions and their ENIs with metadata
    print("Lambda Functions:")
    for function in lambda_enis:
        print(f"Function Name: {function['FunctionName']}")
        for eni_metadata in function['ENIs']:
            print(f"ENI ID: {eni_metadata['ENIId']}")
            print(f"Private IP: {eni_metadata['PrivateIP']}")
            print(f"Description: {eni_metadata['Description']}")
            print(f"Tags: {eni_metadata['Tags']}")
            print("")

